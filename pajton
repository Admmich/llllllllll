
Suma cyfr

# x = int(input("wpisz liczbe:"))  
# def sumacyfr(x):
#     suma = 0
#     for cyfra in str(x):
#         suma += int(cyfra)
#     return suma
# print(sumacyfr(x))


binarna

# import math
# n = int(input("podaj liczbe:"))
# z = int(math.sqrt(n)) + 1
# w = ""
# wynik = True
# for i in range(2, z):
#     if n % i == 0:
#         wynik = False
# while n != 0:
#     r = n % 2
#     w = str(r) + w
#     n = n // 2
# if wynik:
#     print(w, " - tak")
# else:
#     print(w, " - nie")


na czynniki pierwsze



# n=0
# print ("Podaj liczbe:")
# n = int(input())
# a= int((n/2)+1)
# for x in range(1, a):
#     if n % x == 0:
#         print(x)
# print(n)
#
#
# def binarny(n):
#     wynik = ""
#      while n>0:
#          r=n%2
#         n//=2
#     if r == 0:
#         wynik = "0" + wynik
#     else:
#         wynik = "1" + wynik
#
#     wynik = "0" = wynik
#     return wynik
#
#
#
# def u2(d):
#     wynik = "1"
#     tmp = binarny(d)
#     for i in tmp:
#         if i == "1"
#             wynik += "0"
#         else:
#             wynik += "1"
#
#
#
# print("{0:b}".format(11))
# tmp = int("{0:b}".format(11))
# tmp += 1
# print(tmp)

# number = int(input("podaj liczbe dziesiatkowa: "))
# print(binarny(number))
#
# for i in binarny(number):
#     print(i)
# if number >= 0:
# else:


 # PALINDROM

# def polingron(wyr):
#     for i in range(len(wyr)//2):
#         if wyr[i]!=wyr[len(wyr)-i-1]:
#             return False
#         return True
#
# print(polingron("MMMFA"))










# def litery(wyr):
#     for i in wyr:
#         if ord(i) >= and ord(i) <= 90:
#             print("")
# colors = ['red','blue','green']
# print(colors[0])
# print(colors[2])
# print(len(colors))
# print(colors[1][2])

# colors = ['red','blue','green']
# for i in colors :
#     print( i ) #wyswietla nazwy kolorow
#     for i in colors :
#          print(i[0]) #pokazuje 1 litery

# colors = ['red','blue','green']
# # print(colors[4]) error
# # print(colors[-1]) ostatni element
# print(colors[0:1])

# colors = ['red','blue','green']
# colors.append('yellow')     dodaje jelołna koniec listy
# print(colors)

# colors = ['red','blue','green']
# colors.insert(1,'black') da pomiedzy
# print(colors)

# colors = ['red','blue','green']
# print(colors[0])
# print(colors[2])
# print(len(colors))
# print(colors[1][2])

# colors = ['red','blue','green']
# for i in colors :
#     print( i ) #wyswietla nazwy kolorow
#     for i in colors :
#          print(i[0]) #pokazuje 1 litery

# colors = ['red','blue','green']
# # print(colors[4]) error
# # print(colors[-1]) ostatni element
# print(colors[0:1])

# colors = ['red','blue','green']
# colors.append('yellow')     dodaje jelołna koniec listy
# print(colors)

# colors = ['red','blue','green']
# print(colors[0])
# print(colors[2])
# print(len(colors))
# print(colors[1][2])

# colors = ['red','blue','green']
# for i in colors :
#     print( i ) #wyswietla nazwy kolorow
#     for i in colors :
#          print(i[0]) #pokazuje 1 litery

# colors = ['red','blue','green']
# # print(colors[4]) error
# # print(colors[-1]) ostatni element
# print(colors[0:1])

# colors = ['red','blue','green']
# colors.append('yellow')     dodaje jelołna koniec listy
# print(colors)

# dodaj do listy red blue grin

# colors = ['red','blue','green']
# print(colors[0])
# print(colors[2])
# print(len(colors))
# print(colors[1][2])

# colors = ['red','blue','green']
# for i in colors :
#     print( i ) #wyswietla nazwy kolorow
#     for i in colors :
#          print(i[0]) #pokazuje 1 litery

# colors = ['red','blue','green']
# # print(colors[4]) error
# # print(colors[-1]) ostatni element
# print(colors[0:1])

# colors = ['red','blue','green']
# colors.append('yellow')     dodaje jelołna koniec listy
# print(colors)

# colors = ['red','blue','green']
# colors.remove('blue') usuwa
# print(colors)

# sort sortuje liste
# numbers = [1,8,3,5,7,-2]
# numbers.sort()
# print(numbers)

# numbers = [1,8,3,5,7,-2]
# sorted_numbers=sorted(numbers)
# print(sorted_numbers)

# numbers = [1,8,3,5,7,-2]
# x=numbers.copy()
# print(numbers)

# napisz program ktory wczyta liczbe calkowita dodatnia a nastepnie tworzace je cyfry w kolejnosci od cyfry najbardziej znaczacej do jednosci kazda w oddzielnym wierszu
# wykorzystaj do rozwiaznia listy



# liczba = int(input("podaj liczbe: "))
# lista = []
# while liczba > 0:
#     lista.append(liczba%10)
#     liczba //= 10
# for i in range(len(lista)-1,-1,-1):
#         print(lista[i])

# napisz program ktory obliczy silnie liczbe n a do listy przypisze kolejne winiki silni

# liczba = int(input("podaj liczbe: "))
# silnia = []
# wyniksilnia = []
# wyniksilnia = 1
# for j in range(1,liczba+1):
#     wyniksilnia *= j
#     silnia.append(wyniksilnia)
# print(silnia)
# napisz funkcje ktora sprawdzi czy podana liczba jest liczba pierwsza
# import math
#
#
# def nzw(liczba):
#     for i in range(2, int(math.sqrt(liczba)+1)):
#         if liczba % i == 0 :
#             return False
#         return True
# print(nzw(14))

# algorytm szybkiego podnoszenia do potengi

#n^m

# n = int(input("Podaj n:"))
# m = int(input("Podaj m:"))
#
# print(n**m)
#
# def pot1(n,m):
#     wynik = 1
#     for i in range(m):
#         wynik = wynik * n
#     return wynik
# print(pot1(n,m))
#
# def pot2(n,m):
#     if m == 0: return 1
#     return n * pot2(n,m-1)
# print(pot2(n,m))

# def pot3(n,m):
#     tmp = n
#     wynik = 1
#     while m>0:
#         if m%2==1:
#             wynik = wynik * n
#         m = m//2
#         if m>0 :
#             tmp = tmp * tmp
#         return wynik
#
# print(pot3(n,m))

zdanie = "ala ma kota kot lubi Ale"
w = zdanie.split()
def palindrom(wyr):
    for i in range(len(wyr)//2):
        if wyr[i]!=wyr[len(wyr)-i-1]:                                 
            return False
        return True
for i in w:
    print(palindrom(i))

r - plik otwarty do odczytu (read)

w - plik otwarty do zapisu (write), przed zapisem zawartosci pliku jest usuwany

a - plik otwarty do zapisu, dodaje nowa tresc na koncu pliku, nie usuwa starej (append)

b - plik otwarty w tribie binarnym (binarny) 

filepath = "dane.txt" w pajtonie
filepath = "pliki\dane.txt" w forderze w pajtonie
filepath = "D:\dane\dane.txt" folder na dysku d

\n- enter
\t- tabulator


filepath = "dane.txt"

liczby = []
f = open(filepath,"r")
for line in f:
    liczby.append(line.strip())
    print(liczby)
    print(len(liczby[0]))
f.close()

def palindrom(x):
    for i in range(len(x) // 2):
        if (x[i] != f[len(x) - i - 1]:
            return False
        return True
filepath = "dane.txt"

liczby = []
f = open(filepath,"r")
for line in f:
    liczby.append(line.strip())
    print(liczby)

f.close()
for i in liczby:
    if palindrom(i) :
        print(i)

strip() - usuwa puste znaki
split() - dzieli na listy



 
filepath = "lol.txt"

f = open(filepath,"r")

liczby = []

for line in f:

    liczby.append(line.strip())

print(liczby)

liczby = [int(i) for i in liczby]

a = sum(liczby)

print(a)
        





x =w.strip() = usuwa puste znaki


def palindrom(w):
    for i in range(len(w) // 2):
        if w[i] != w[len(w)-i-1]:
            return False
        return True







NA KARTOWKE
def palindrom(w):
    for i in range(len(w) // 2):
        if w[i] != w[len(w)-i-1]:
            return False
        return True

file =open("palindrom.txt",'r')
wyr = []
for i in file:
    tmp = i.strip()
    wyr.append(tmp.split())
    ile = 0
for z in wyr:
    for x in z:
praca domowa
        if palindrom(x):
            ile += 1
print(ile)

popraw aplikacje tak aby z wyrazenia posiadajacych na koncu takie znaki jak , lub . (nie bedace litera usuna je i sprawidzl czy te wyrazenia sa palindromem


def palindrom(liczby): 
  for i in range(len(liczby)//2): 
    if liczby[i]!= liczby[len(liczby)-i-1]: 
       return False 
  return True 
f = open("palindrom.txt","r") 

wyrazy = [] 

for i in f: 
  tmp = i.strip() 

  wyrazy.append(tmp.split()) 
nowa = [[j.strip('.,') for j in i] for i in wyrazy] 

ile = 0 
for z in nowa: 
  for x in z: 
    if palindrom(x): 
       ile += 1 
       print(x) 
print(ile)



wyswietl pierwsza liczbe kora jest pierwsza i rownoczesnie palindromiczna



----------------------





liczba zlozona czy nie zlozona

i = int(input("podaj liczbe: "))

d = 5

pierwsze = i>1

if i>2 and i%2==0:
    pierwsze = False

if i>3 and i%3==0:
    pierwsze = False

while pierwsze and d*d <= i:
    if i % d == 0:
        pierwsze = False
    else:
        if i % (d+2) == 0:
            pierwsze = False
        else:
            d = d + 6

if pierwsze :
    print("pierwsza")
else:
    print("zlozona")




# liczby pierwsze
import math
def pierwsza(x):
    for i in range(2,int(math.sqrt(x)+1)):
        if x % i == 0:
            return False
        return True

i = int(input("podaj liczbe: "))
print(pierwsza(i))



#euklides
a = 90
b = 160
#odejmowanie
def nwd(a, b):
    while a != b:
        if a > b :
            a -= b # a = a - b
        else :
            b -= a
    return a

print("NWD(",a,",",b,")=",end="")
#dzielenie
def Nwdd(a,b):
    while b != 0:
        tmp = b
        b = a % b
        a = tmp
    return a
print("NWD(",a,",",b,")=" ,Nwdd(a,b))


print(a)


na kartwoke 

# euklides
dodawanie

l1 = int(input("podaj licznik 1: "))
m1 = int(input("podaj mianownik 2: "))
l2 = int(input("podaj licznik 2: "))
m2 = int(input("podaj mianownik 2: "))

def nwd(a,b):
    while b != 0 :
        tmp = b
        b= a % b
        a = tmp
    return a

def nww(a,b):
    return a*b//nwd(a,b)

#dodawanie ulamkow
mw = nww(m1,m2)
l1w = l1 * (m2 // nwd(m1,m2))
l2w = l2 * (m1 // nwd(m1,m2))
cal = (l1w + l2w) // mw
lw = (l1w + l2w) % mw
lw = lw // nwd(lw,mw)
mw = mw // nwd(lw,mw)

if cal == 0:
    print(l1, "/", m1, "+", l2, "/", m2, "=", l1w + l2w, "/", mw)
else:
    print(l1,"/",m1,"+",l2,"/",m2,"=",l1w+l2w,"/",mw)

# euklides
odejmowanie

l1 = int(input("podaj licznik 1: "))
m1 = int(input("podaj mianownik 2: "))
l2 = int(input("podaj licznik 2: "))
m2 = int(input("podaj mianownik 2: "))

def nwd(a,b):
    while b != 0 :
        tmp = b
        b= a % b
        a = tmp
    return a

def nww(a,b):
    return a*b//nwd(a,b)

#dodawanie ulamkow
mw = nww(m1,m2)
print(mw)
l1w = l1 * (m2 // nwd(m1,m2))
print(l1w)
l2w = l2 * (m1 // nwd(m1,m2))
print(l2w)

cal = math.fabs(l1w - l2w) // mw
print(cal)
lw = int(math.fabs(l1w - l2w)) % mw

lw = lw // nwd(lw,mw)
mw = mw // nwd(lw,mw)
if l1w<l2w:
    lw *= -1
if cal == 0:
    print(l1, "/", m1, "-", l2, "/", m2, "=",lw, "/", mw)
else:
    print(l1,"/",m1,"-",l2,"/",m2,"=",cal,lw,"/",mw)


CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR CEZAR 



s = input("Podaj slowo: ")
i = 8

def cezar(s,i):
    t = ""
    for z in s:
        tmp = ord(z.lower())
        if tmp > 122 - i:
            t += chr(tmp+i-26)
        else:
            t += chr(tmp+i)
    return t

print(cezar(s,i))
# print(cezar("kalafior",6))



def cezarodwrotnie(s,i):
    t = ""
    for z in s:
        tmp = ord(z.lower())
        if tmp > 122 + i:
            t += chr(tmp - i - 26)
        else:
            t += chr(tmp - i)
    return t
print(cezarodwrotnie(cezar("kalafior",6),6)



# 
# def deszyfrowanie(tekst, kluczprzesunięcia):
#     a = ""
#     for i in range(len(tekst)):
#         b = tekst[i]
#         if b == " ":
#             a += " "
#         elif (b.isupper()):
#             a += chr((ord(b) + kluczprzesunięcia - 65) % 26 + 65)
#         else:
#             a += chr((ord(b) + kluczprzesunięcia - 97) % 26 + 97)
#     return a
# 
# 
# tekst = input("wpisz kod do deszyfryzacji:")
# kluczprzesunięcia = -1
# print("odszyfrowany kod: " + deszyfrowanie(tekst, kluczprzesunięcia))




from random import randint
def los(n):
    lista=[ ]
    for i in range(n):
        lista.append(randint(0,100))
    return lista
print(los(10))
m = randint (0,100)
def szukaj(lista,m):
    for i in lista:
        if i ==m:
            return True
        return False
print(szukaj(los(100),m))





odszyfrowanie i szyfrowanie 



l = "TO JEST TAJNE"
s = "TAJNE"
print(l)
def szyfr(l, s):
    si = len(s)
    j = 0
    x = ""
    for i in range(len(l)):
        if si == j:
            j = 0
        if l[i] != " ":
            x = x + chr( ( ( ord(l[i]) + ord(s[j] ) ) % 26 ) + 65 )
        else :
            x = x + " "
        j = j + 1
    return x

print(szyfr(l, s))

def rozszyfr(l,s):
    si = len(s)
    j = 0
    x = ""
    for i in range(len(l)):
        if si == j:
            j = 0
        if l[i] != " ":
            x = x + chr( ( ( ord(l[i]) - ord(s[j] ) ) % 26 ) + 65 )
            j = j + 1
        else :
            x = x + " "
            j = j + 1
    return x

print(rozszyfr( szyfr(l,s), s))













tekst = "ALA MA KOTA"
tekst2 = ""
for i in tekst:
    if i == " ":
        tekst2 += "#"
    else:
        tekst2 += i
print(tekst2)

def szyfr(tekst, klucz):
    szyfrogram = ""
    while len(tekst)%klucz != 0:
        tekst += "#"

    for i in range(klucz):
        for j in range(i, len(tekst), klucz):
            szyfrogram += tekst[j]

    return szyfrogram
print(szyfr(tekst2,3))

def antyszyfr(szyfrogram, klucz) :
    tekst = ""
    klucz = len(szyfrogram) // klucz
    for i in range(klucz):
        for j in range(i, len(szyfrogram), klucz):
            tekst += szyfrogram[j]
    return tekst

# napisz program ktory znajduje podana literre w tekscie
#napisz program wyswitlajancy w liscie wszystkie indeksy wystepowania podanej litery w tekscie

# t = szyfr(szyfr(tekst2,3))
#
# for i in range(len(t)):
#     if i == 0:
#         print(t[i],end="")
#     else:
#         if i % 3 == 0 :
#             print()
#             print(t[i])
#         else :
#             print(t[i],end="")
































gflkagaskegmsbelijSHGFUYWgwouWflkj CLFQWHNCG




import random
lista = []
def los(n):
    lista = []
    for i in range(n):
        lista.append(random.randint(1,6))
    return lista


sorted_lista = sorted(lista)
print(sorted_lista)


def indexy(lista):
    indexymax = []
    indekxymini = []
    minimum = 6
    maksimum = 1
    for i in lista:
        if minimum > i:
            minimum = i
        if maksimum < i:
            maksimum = i

    for i, j in enumerate(lista):
        if j ==maksimum:
            indexymax.append(i)
        if j == minimum:
            indekxymini.append(i)
    return  [indexymax, indekxymini]

lista = los(100)
print(sorted_lista)
print(lista)








n = input()
m = input()

nlen = len(n)
mlen = len(m)

indices = []

count = 0

for i in range(nlen - mlen + 1):
    znajdz = True
    for j in range(mlen):
        if n[i+j] != m[j]:
            znajdz = False
            break
    if znajdz:
        indices.append(i)
        count += 1

print(count)
print(*indices)



poszukujemy liczby


import random

def los(n):
    lista = [ ]
    for i in range(n):
        lista.append(random.randint(1,20))
    return lista

list = los(10)

print(list)

print(10 in list)

def search1(lista, szukana):
    f = False
    for i in lista:
        if i == szukana:
            f = True
            break
    return f

print(search1(list, 10))





sortowanie babelkowe n=n-1xn-1=9
4=n



liczby = [3,5,1,7,2]
print(liczby)
def sortowanie_babeM(liczby):
    n = len(liczby)
    for i in range(n):
        for j in range(n-1-i):
            if liczby[j] > liczby[j+1]:
                liczby[j] ,liczby[j+1] = liczby[j+1], liczby[j]
        return liczby
print(sortowanie_babeM(liczby))







# import random
#
# def los(n):
#     lista = []
#     for i in range(n):
#         lista.append(random.randint(1,20))
#     return lista
#
# list = los(1000000)
# list.sort()
# print(list)
#
# def searchBinary(lista, szukana):
#     f = False
#     x = 0
#     left = 0
#     right = len(lista)-1
#     pivot = (left + right) // 2
#     while left <= right :
#         print(left, right, pivot)
#         if lista[pivot] == szukana :
#             f = True
#             break
#         if lista[pivot] > szukana :
#             right = pivot - 1
#         else :
#             left = pivot + 1
#         pivot = (left + right) // 2
#     return [f,x]
#
# print(searchBinary(list, 100))


lkjFLKJfbLGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB


# import random
#
# def los(n):
#     lista = []
#     for i in range(n):
#         lista.append(random.randint(1,20))
#     return lista
#
# list = los(1000000)
# list.sort()
# print(list)
#
# def searchBinary(lista, szukana):
#     f = False
#     x = 0
#     left = 0
#     right = len(lista)-1
#     pivot = (left + right) // 2
#     while left <= right :
#         print(left, right, pivot)
#         if lista[pivot] == szukana :
#             f = True
#             break
#         if lista[pivot] > szukana :
#             right = pivot - 1
#         else :
#             left = pivot + 1
#         pivot = (left + right) // 2
#     return [f,x]
#
# print(searchBinary(list, 100))
#
#
# import random
#
# def los(n):
#     lista = [ ]
#     for i in range(n):
#         lista.append(random.randint(1,100000))
#     return lista
#
# list = los(100000)
#
# print(list)
#
# print(10 in list)
#
# def search1(lista, szukana):
#     f = False
#     for i in lista:
#         if i == szukana:
#             f = True
#             break
#     return f
#
# print(search1(list, 64276242))






nomin = [500,200,100,50,20,10,5,2,1]

reszta = 44

tablica = []

i = 0
while reszta > 0 :
    if reszta >= nomin[i]:
        tablica.append(nomin[])



OD TEGO DO ZESZYTU


FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE FAJNE 

reszta = 1234

def algzachlanny(reszta):
    global  nomin
    nomin = [500,200,100,50,20,10,5,2,1]
    i = 0
    tablica = []
    while reszta > 0 :
        if reszta >= nomin[i]:
            tablica.append(nomin[i])
            reszta -= nomin[i]
        else :
            i += 1
    return tablica

t = algzachlanny(reszta)

for i in nomin:
    if t.count(i):
        print(i, " = " , t.count(i) , " szt. ")






sortowanie bombelkowe 
def sortbable(t):
    for i in range(len(t)):
        for j in range(len(t)-i-1):
            if t[j] >  t[j+1]:
                t[j],t[j+1] = t[j+1],t[j]
    return t
t = [1,2,9,5,6]
print(t)
sortbable(t)
print(t)


wzor na optymalizacje n(n-1)/2





kolejne def sortw(t):
    for i in range(1,len(t)):
        tmp = t[i]
        j = i - 1
        while t[j]>tmp and j>=0:
            t[j+1] = t[j]
            j -= 1
        t[j+1] = tmp
    return t

 t = [1,8,4,5,2,6,0]
print(t)
sortw(t)




rekurencja def frekurencja(n):
    if n == 1:
        return 6
    return 2*frekurencja(n - 1);


print(frekurencja(5))


def silniai(n):
    wynik = 1
    for i in range(1,n+1):
        wynik *= i
    return wynik

x = 955

print(silniai(x))
print(silniar(x))





# a, b = 0, 1
# print("wyraz", 1, a)
# print("wyraz", 2, b)
# for i in range(1, n - 1):
#     # wynik = a + b
#     a, b = b, a + b
#     print("wyraz", i + 2, b)
#
#     print()  # wiersz odstępu
#     return b
#
#
# def fib_rek(n):
#     """
#         Funkcja zwraca n-ty wyraz ciągu Fibonacciego.
#         Wersja rekurencyjna.
#     """
#     if n < 1:
#         return 0
#     if n < 2:
#         return 1
#     return fib_rek(n - 1) + fib_rek(n - 2)
#
#
# def main(args):
#     n = int(input("Podaj nr wyrazu: "))
#     fib_iter1(n)
#     print()
#     print("=" * 40)
#     fib_iter2(n)
#     print("=" * 40)
#     print(fib_rek(n - 1))
#     return 0
#
#
# if __name__ == '__main__':
#     import sys
#     sys.exit(main(sys.argv))
#
# n = i
# while abs(f(n+1)/f(n)-f(n+2)/f(n+1))>00001:
#     n+=1
# print(f(n+1)/f(n)-f(n+2)/f(n+1))




i=4
lista=[10,13,12,8]
print(lista)
def sortwybr(lista):
    n=len(lista)
    for j in range(n-1):
        min=1
        for j in range(i+1,n):
            if(lista[j]<lista[min]):
                min=j
        lista[i],lista[min]=lista[min],lista[i]
    return lista
print(sortwybr(lista))


fajne wrescie cos



from tkinter import *

window = Tk()

window.title("lololol")
window.geometry("400x400")

number = 1

def buttonClick():
    global labelNumber
    labelNumber.destroy()
    global number
    number += 1
    labelNumber = Label(window, text=number, font=('Arial', 20))
    labelNumber.grid(row=1, column=0)

label = Label(window, text="moja aplikacja" , font=('Arial', 20))
label.grid(row=0, column=0, padx=10, pady=10)
labelNumber = Label(window, text=number, font=('Arial', 20))
labelNumber.grid(row=1, column=0)
button = Button(window, text="+1", font=('Arial', 20), padx=20, pady=40, command=lambda: buttonClick())
button.grid(row=2, column=0)
window.mainloop()









from tkinter import *

window = Tk()

window.title("lololol")
window.geometry("400x400")

number = str(0)

def buttonClick(n):
    global labelNumber
    labelNumber.destroy()
    global number
    if number == "0":
        number = str(n)
    else:
        number += str(n)
    labelNumber = Label(window, text=number, font=('Arial', 20))
    labelNumber.grid(row=1, column=0, columnspan=5)


labelNumber = Label(window, text=number, font=('Arial', 20))
labelNumber.grid(row=1, column=0)
button = Button(window, text="1", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(1))
button.grid(row=2, column=0)
jedenbutton = Button(window, text="2", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(2))
jedenbutton.grid(row=2, column=1)
dwabutton = Button(window, text="3", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(3))
dwabutton.grid(row=2, column=2)
trzybutton = Button(window, text="4", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(4))
trzybutton.grid(row=3, column=0)
czterybutton = Button(window, text="5", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(5))
czterybutton.grid(row=3, column=1)
piecbutton = Button(window, text="6", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(6))
piecbutton.grid(row=3, column=2)
szescbutton = Button(window, text="7", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(7))
szescbutton.grid(row=4, column=0)
siedbutton = Button(window, text="8", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(8))
siedbutton.grid(row=4, column=1)
osebutton = Button(window, text="9", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick(9))
osebutton.grid(row=4, column=2)
dziewbutton = Button(window, text="0", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick())
dziewbutton.grid(row=5, column=0)
zerobutton = Button(window, text="c", font=('Arial', 20), padx=3, pady=3, command=lambda: buttonClick())
zerobutton.grid(row=5, column=0)

window.mainloop()





from tkinter import *

window = Tk()
window.title("App")
window.geometry("400x400")
number = str(0)
def butonClick(n):
    global labelNumber
    labelNumber.destroy()
    global number
    if number == "0":
        number = str(n)
    else:
        number += str(n)
    labelNumber = Label(window, text=number, font=('Arial', 10))
    labelNumber.grid(row=1, column=0, columnspan=5)

def buttonCancel():
    global labelNumber
    labelNumber.destroy()
    global number
    number = str(0)
    labelNumber = Label(window, text=number, font=('Arial', 10))
    labelNumber.grid(row=1, column=0, columnspan=5)


number1 = 0
number2 = 0
def plus():
    global number
    global number1
    global znak
    znak = "+"
    number1 = int(number)
    print(number1)
    number = "0"
    edit.insert(0,"number")
    print(edit.get())

def slide(var):
    mojLabel = Label(root, text=horizontal.get()).pack()
    root.geometry(str(horizontal.get()) + "x400")

horizontal = Scale(root, form_=0, to=400, orient=Horizontal, commadn=slide)
horizontal.pack()

def result():
    global number
    global number1
    global number2
    global znak
    number2 = int(number)
    print(number1, number2, number1+number2)
    res = 0
    if znak == "+":
        res = number1 + number2
    number = "0"
    global labelNumber
    labelNumber.destroy()
    labelNumber = Label(window, text=res, font=('Arial', 10))
    labelNumber.grid(row=1, column=0, columnspan=5)

labelNumber = Label(window, text=number, font=('Arial', 20))
labelNumber.grid(row=1, column= 0)
button1 = Button(window,text=" 1", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(1))
button1.grid(row=2, column=0)
button2 = Button(window,text="2", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(2))
button2.grid(row=2, column=1)
button3 = Button(window,text="3", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(3))
button3.grid(row=2, column=2)
button4 = Button(window,text="4", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(4))
button4.grid(row=3, column=0)
button5 = Button(window,text="5", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(5))
button5.grid(row=3, column=1)
button6 = Button(window,text="6", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(6))
button6.grid(row=3, column=2)
button7 = Button(window,text="7", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(7))
button7.grid(row=4, column=0)
button8 = Button(window,text="8", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(8))
button8.grid(row=4, column=1)
button9 = Button(window,text="9", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(9))
button9.grid(row=4, column=2)
button0 = Button(window,text="0", font=('Arial', 20), padx=3, pady=3, command=lambda: butonClick(0))
button0.grid(row=5, column=1)

buttonC= Button(window, text='C', font=('Arial', 20), padx=3, pady=3, command=lambda: buttonCancel())
buttonC.grid(row=5, column=0)
resultButon = Button(window, text="=", font=('Arial', 20), padx=3,pady=3, command=lambda:result())
resultButon.grid(row=5,column=2)
button = Button(window,text="+", font=('Arial', 20), padx=3, pady=3, command=lambda: plus())
button.grid(row=2, column=4)


edit = Entry(window, width=20, font=('Arial',20),borderwidth=8, state='readonly')
edit.grid(row=10,column=0,columnspan=4)

window.mainloop()








import tkinter as tk

def button_click(number):
    current = entry_result.get()
    entry_result.delete(0, tk.END)
    entry_result.insert(tk.END, current + str(number))

def button_clear():
    entry_result.delete(0, tk.END)

def button_equal():
    try:
        expression = entry_result.get()
        result = eval(expression)
        entry_result.delete(0, tk.END)
        entry_result.insert(tk.END, str(result))
    except:
        entry_result.delete(0, tk.END)
        entry_result.insert(tk.END, "Error")


window = tk.Tk()
window.title("Calculator")


entry_result = tk.Entry(window)
entry_result.grid(row=0, column=0, columnspan=4, padx=5, pady=5)


button_1 = tk.Button(window, text="1", command=lambda: button_click(1))
button_1.grid(row=1, column=0, padx=5, pady=5)
button_2 = tk.Button(window, text="2", command=lambda: button_click(2))
button_2.grid(row=1, column=1, padx=5, pady=5)
button_3 = tk.Button(window, text="3", command=lambda: button_click(3))
button_3.grid(row=1, column=2, padx=5, pady=5)

button_4 = tk.Button(window, text="4", command=lambda: button_click(4))
button_4.grid(row=2, column=0, padx=5, pady=5)
button_5 = tk.Button(window, text="5", command=lambda: button_click(5))
button_5.grid(row=2, column=1, padx=5, pady=5)
button_6 = tk.Button(window, text="6", command=lambda: button_click(6))
button_6.grid(row=2, column=2, padx=5, pady=5)

button_7 = tk.Button(window, text="7", command=lambda: button_click(7))
button_7.grid(row=3, column=0, padx=5, pady=5)
button_8 = tk.Button(window, text="8", command=lambda: button_click(8))
button_8.grid(row=3, column=1, padx=5, pady=5)
button_9 = tk.Button(window, text="9", command=lambda: button_click(9))
button_9.grid(row=3, column=2, padx=5, pady=5)

button_0 = tk.Button(window, text="0", command=lambda: button_click(0))
button_0.grid(row=4, column=0, padx=5, pady=5)


button_add = tk.Button(window, text="+", command=lambda: button_click("+"))
button_add.grid(row=1, column=3, padx=5, pady=5)
button_subtract = tk.Button(window, text="-", command=lambda: button_click("-"))
button_subtract.grid(row=2, column=3, padx=5, pady=5)
button_multiply = tk.Button(window, text="*", command=lambda: button_click("*"))
button_multiply.grid(row=3, column=3, padx=5, pady=5)
button_divide = tk.Button(window, text="/", command=lambda: button_click("/"))
button_divide.grid(row=4, column=3, padx=5, pady=5)

button_clear = tk.Button(window, text="C", command=button_clear)
button_clear.grid(row=4, column=1, padx=5, pady=5)

button_equal = tk.Button(window, text="=", command=button_equal)
button_equal.grid(row=4, column=2, padx=5, pady=5)


window.mainloop()

import random
lista = []
def los (x):
    for i in range(x):
        lista.append(random.randint(0,100))
los(5)
print(lista)
-----------------------------------------------------------------------------
owoce = ['gruszka','ananas','banan','kiwi','granat']
def listreturnlen(lista):
    return [len(i) for i in lista]

print(listreturnlen(owoce))

def listlena(lista):
    return [ i.count('a') for i in lista ]

print(listreturnlen(owoce))
print(listlena(owoce))
----------------------------------------------------------------------

lista = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]
def sumawierszy(lista):
    return [sum(i) for i in lista]
def sumakolumn(lista):
    res = []
    for i in range(len(lista)):
        suma = 0
        for j in range(len(lista[i])):
            suma += lista[j][i]
        res.append(suma)
    return res

print(sumawierszy(lista))
print(sumakolumn(lista))
sumawierszy = [6, 15, 24]
sumakolumn = [12, 15, 18]

-----------------------------------
plik = "dane.txt"
with open(plik, "r")as file:
    for line in file:
        print(line) jak




# plik = "dane.txt"
# with open(plik, "r")as file:
# lista=[]
#     for line in file:
#         for line in file:
#             lista.append(int(line))
#         print(lista)
# plik = "owoce"
# lista1=[]
# with open(plik,"r") as file1:
#     for line in file1:
#         lista1.append(line.strip())
#
# lista2=[]
# for i in lista1:
#     if (i == i [::-1]):
#         print(i)
#     else:
#         print((i.count("a")))

def palindrom(s):
    for i in range(len(s)//2):
        if s[i]!=s[-1-i]:
            return False
        return True
print(palindrom("kajak"))
-------------------------------------------------
from random import randint
lista=[randint(1000, 999999999999999999) for i in range(1000)]
print(lista)



def pal(liczba):
   liczba = str(liczba)
   for i in liczba:
       if i == i[::-1]:
            return True
       return False
print(pal(1234))
print(pal(121))


def palindrom(liczba):
    liczba = str(liczba)




# def suma_k(n):
#     suma=0
#     while n > 0:
#         cyfra = n % 10
#         kwadrat_c = cyfra ** 2
#         suma = suma + kwadrat_c
#         n = n //10
#     return suma
#
# print(suma_k(34))
#
# def wesola(n):
#     lista_l =[]
#     while n!=1 and n not in lista_l:
#         lista_l.append(n)
#         n = suma_k(n)
#     return n
#
# print(wesola)



parzyste=[]
nieparzyste=[]
wszytkie=[]
def dk():
    a=1
    while a < 2:
        liczby = int(input("podaj liczby"))
        if liczby %2 == 0:
            parzyste.append(liczby)
        else:
            nieparzyste.append(liczby)
        wszytkie.append(liczby)
        if liczby == 0:
            a = a+1
    return (parzyste,nieparzyste,wszytkie)
z = dk()
print(z[0])
print(z[1])
print(z[2])

sorted([2,5,0,1])

[1,4,5,0].sort()
reverse()
sum()
len()
max()
min()
    for i in range(len(liczba) // 2):
        if (liczba[i] != liczba[len(liczba) - i - 1]:
            return False
        return True


#tuple
#sa literitalne i zwracaja czesc elementow i moga byc kraszowalne czyli moga byc ktorka nazwac elemnty w slowniku mozemy nazywac elemantami krotki to czesc elementu slownieka
zienna = (1,2,3,'a','b','c')
print(zienna)


lista = (1,2,3,'a','b','c')
a = tuple(lista)
print(a)

napis = "programowanie"
n = tuple(napis)
print(n)

liczba = [10001]
l = tuple(liczba)
print(l)

#stworz tuple z ocen ucznia uzyj metody count do zliczenia wystapien danej oceny

oceny = (1,2,3,4,1,2,2,1,2,3)
print(oceny.count(5))
print(oceny.count(1))


# #klucz: wartosc
# dictnew = {
#     'imie': 'Jan'
#     'wiek': 11
# }
#
#
# dictnew2 = {
#     "lista": [1,2,3,4]
# }
# print(dictnew['imie'])
# print(dictnew)
#
# for i in dictnew:
#     print(i)
# for i in dictnew:
#     print(dictnew[i,":",dictnew[i]])
#
# print(dictnew2['lista'][1])
# for i in dictnew2['lista']:
#     print()

towar = {
    'mars': 10,
    'orion': 13,
    'princeplo': 5
}
print(towar)
towar['orion'] = 30
print(towar)

liczby = {
    1: 100000,
    2: 333333,
    4: 55555555
}
print(liczby[2])
print(type(liczby))


print(liczby.keys())
print(liczby.items())
print(liczby.get(1))




print(liczby)
liczby.clear()
print(liczby)


d = {'a': 20, 'b': 10, 'c': 15}
print(d.get('b'))
if d.get('z') != None:
    print('istnieje')
else:
    print('brak w dict.')

g = {'a': 20, 'b': 10, 'c': 15}
p = list(g.items())
print(p)
print(p[0])
print(p[1][1])

g.pop('b')
print(g)
g.popitem()
print(g)


x = {'a': 10, 'b': 40, 'c': 100}
y = {'b': 10000, 'd': 10000}
print(x)
x.update(y)
print(x)

def ileA(n):
    ile = 0
    for z in n:
        if z == 'A':
            ile += 1
    if ile > len(n)*0.3:
        return True
    return False


def zadanie(d):
    t = []
    for i in d:
        if ileA(d[i]):
            t.append(i.key())
    return t
print(zadanie(geny))



geny = {}
with open('dane_geny.txt') as file:
    for index, line in enumerate(file):
        geny.update({index:line.strip()})



lista = []
print(geny)
for i in geny.values():



geny = {}
with open('dane_geny.txt') as file:
    for index, line in enumerate(file):
        geny.update({index:line.strip()})


for i in geny.items():
    print(i)



lista = []
print(geny)
for i in geny.values():
    if len(i[1]) > 30:
        if i[1].count("AAABBB") >= 2:
            lista.append(i[0])
print(lista)
    if len(i) > 30:
        if i.count("AAABBB") >= 2:
            lista.append(i)
print(lista)



# geny = {}
# with open('dane_geny.txt') as file:
#     for index, line in enumerate(file):
#         geny.update({index:line.strip()})
#
#
# for i in geny.items():
#     print(i)
#
#
#
# lista = []
# print(geny)
# for i in geny.values():
#     if len(i[1]) > 30:
#         if i[1].count("AAABBB") >= 2:
#             lista.append(i[0])
# print(lista)



#utworz slownik produkow w magazynie produkty maja byc zapisane tak

produkt = {
    'ser': {'ilosc': 10,'cena': 3},
    'twarog': {'ilosc': 20,'cena': 5},
    'cipsy': {'ilosc': 110, 'cena': 8},
    'jajka': {'ilosc': 123, 'cena': 10},
    'kurczak': {'ilosc': 100, 'cena': 20},
    'tunczyk': {'ilosc': 30, 'cena': 6},
    'fasola': {'ilosc': 40, 'cena': 12},
    'woda': {'ilosc': 1111, 'cena': 2},
    'maka': {'ilosc': 150, 'cena': 4},

}

def pokazmagzyn(produkt):
    print("caly magazyn")
    for prodktt, dane in produkt.items():
        print((f"{prodktt}: Ilosc: {dane['ilosc']}. cena: {dane['cena']} $"))
    pass

def stanmagaznu(produkt):
    kwota = 0
    for prodktt, dane in produkt.items():
        kwota += dane['ilosc'] * dane['cena']
    return f"stan magazynu {kwota}$."

def dodajprodukt(produkt, produktt, ilosc, cena):
    if produktt in produkt:
        return f"produkt ejst w magzynie"
    produkt[produktt] = {'ilosc': ilosc, 'cena': cena}
    return f"produktt: {produktt} dodan do magazynu"



def zmienpoduskwmagaznie(produkt, produktt, ilosc):
    if produktt in produkt:
        produkt[produktt]['ilosc']= ilosc
        return f"zmienono {produktt}."
    else:
        return f"{produktt} nie istnieje "

def menu(produktt, cena):
    if produktt in produkt:
        return f"menu"
    produkt[produktt] = {'produktt': produktt, 'cena': cena}
    return f"produktt: {produktt} w menu"
    pass

pokazmagzyn(produkt)
print(stanmagaznu(produkt))
print(dodajprodukt(produkt, "ser", 100))
pokazmagzyn(produkt)
print(zmienpoduskwmagaznie(produkt, "ser", 1))
pokazmagzyn(produkt)




def pobieranie():
    tempDict = {}
    with open('temperatury_nowy_york.txt', 'r') as file:
        for line in file:
            tempDict.update({line[0:10]: line[11::].strip()})
    return tempDict
print(pobieranie())




dane = pobieranie()
tmplist= []
for i in dane.values():
    tmplist.append(i)

iloscdni = 0
tmpiloscdni = 1
for i in range(len(tmplist)-1):
    if tmplist[i] <= tmplist[i+1]:
        tmpiloscdni += 1
    else:
        if iloscdni < tmpiloscdni:
            iloscdni = tmpiloscdni
        tmpiloscdni = 1
print(iloscdni)


srednia = sum(tmplist) / len(tmplist)
tmp = []
for i in tmplist:
    if i < srednia:
        tmp.append(i)
print(len(tmp))



tmplist= []
piatek=[]
sobota=[]
for i, j in enumerate(tmplist):
    if i%7 == 0:
        piatek.append(j)
    if i % 7 == 0:
        sobota.append(j)

    sredniapiatek= sum(piatek) / len(piatek)
    sredniasobota = sum(sobota) / len(sobota)
print(sredniapiatek)
print(sredniasobota)



p = []
for k in dane.items():
    p.append(k)
print(p)

data= []
tmp= []
for n in range(len(p)-1):
    if p[n][1] > p[n + 1][1]:
        tmp.append(p[n])
    else:
        if len(data) < len(tmp):
            data = tmp
            tmp= []
        else:
            tmp= []
print(data)




import math


def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_


def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t) - count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_


def zeruj(t, p):
    while len(t) >= 4:
        m = math.floor(len(t) / 4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        print(t)
        print(p)
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t) - m):
            x.append(t[i])
        t = x
        print(p)


t = [1, 7, 3, 3, 1, 2, 8, 5, 7, 2, 5, 8]
p = [3, 8, 7, 4, 2, 8, 1, 9, 4, 5, 7, 1]

zeruj(t, p)



import math


def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_


def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t) - count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_


def zeruj(t, p):
    while len(t) >= 4:
        m = int(len(t) / 4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t) - m):
            x.append(t[i])
        t = x
    print(zlicz(p))


def zlicz(p):
    count = 0
    i = 0
    while (i < len(p)):
        if p[i] == 0:
            count += 1
        i += 1
    return count


t = []
p = []
for num in range(0, 9):
    for push_element in range(0, 200):
        t.append(num + 1)
        p.append(num + 1)
zeruj(t, p)


def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_


def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t) - count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_


def zeruj(t, p):
    while len(t) >= 4:
        m = int(len(t) / 4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t) - m):
            x.append(t[i])
        t = x





----------------------------------

1 
def znajdz_min(t, count):
Definiujemy funkcję znajdz_min, która przyjmuje dwa argumenty:

t: listę liczb,
count: liczbę całkowitą, która określa, ile początkowych elementów listy t chcemy wziąć pod uwagę.

    min_ = t[0]
Inicjalizujemy zmienną min_ jako pierwszy element listy t. Ta zmienna będzie przechowywała najmniejszą wartość.


    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
Pętla for przechodzi przez pierwsze count elementów listy t. Jeżeli dany element t[i] jest mniejszy od min_, to aktualizujemy min_ do tej mniejszej wartości. Dzięki temu na końcu pętli min_ zawiera najmniejszą wartość spośród count początkowych elementów.


    return min_
Funkcja zwraca znalezioną najmniejszą wartość.

Funkcja znajdz_max(t, count)

def znajdz_max(t, count):
Definiujemy funkcję znajdz_max, która przyjmuje dwa argumenty:

t: listę liczb,
count: liczbę całkowitą, która określa, ile końcowych elementów listy t chcemy wziąć pod uwagę.

    max_ = 0
Inicjalizujemy zmienną max_ na 0. Będzie ona przechowywać największą wartość.

od
    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
Pętla for przechodzi przez ostatnie count elementów listy t. Jeśli dany element t[i] jest większy niż max_, to aktualizujemy max_ do tej większej wartości. Na końcu pętli max_ zawiera największą wartość spośród analizowanych elementów.


    return max_
Funkcja zwraca znalezioną największą wartość.

Funkcja zeruj(t, p)

def zeruj(t, p):
Definiujemy funkcję zeruj, która przyjmuje dwie listy t i p.


    while len(t) >= 4:
Pętla while działa tak długo, jak długo lista t ma długość co najmniej 4. To zapewnia, że będziemy mogli podzielić listę t na części.


        m = math.floor(len(t)/4)
Obliczamy m, czyli długość jednej czwartej listy t, zaokrągloną w dół. Dzielimy listę t na cztery części.


        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
Wywołujemy funkcje znajdz_min i znajdz_max, aby znaleźć najmniejszy i największy element w pierwszej i ostatniej jednej czwartej listy t.

        print("min - " + str(min_) + " max - " + str(max_))
        print(t)
        print(p)
Wyświetlamy wartości minimalne i maksymalne oraz bieżące wartości list t i p.


        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
Przechodzimy przez wszystkie elementy listy p. Jeśli dany element jest mniejszy od min_ lub większy od max_, zamieniamy go na 0.


        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
Tworzymy nową listę x, która zawiera elementy t z pominięciem pierwszych i ostatnich m elementów.


        t = x
Aktualizujemy t, przypisując do niej nową listę x.


        print(p)
Wyświetlamy aktualny stan listy p po dokonaniu zmian.



# Zadanie 1.1

import math

def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_
            
def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_
            

def zeruj(t, p):
    while len(t) >= 4:
        m = math.floor(len(t)/4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        print(t)
        print(p)
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
        t = x
        print(p)
t=[1,7,3,3,1,2,8,5,7,2,5,8]
p=[3,8,7,4,2,8,1,9,4,5,7,1]

zeruj(t,p)

------------------------------------
2
Funkcja znajdz_min(t, count)
Ta funkcja jest identyczna jak w poprzednim zadaniu i służy do znalezienia najmniejszego elementu w pierwszych count elementach listy t.


def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_
Funkcja znajdz_max(t, count)
Ta funkcja jest również identyczna jak wcześniej, ale może mieć ten sam potencjalny problem z inicjalizacją max_ na 0 (szczególnie jeśli wszystkie wartości w t są mniejsze od 0). Funkcja znajduje maksymalny element w ostatnich count elementach listy t.


def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_
Funkcja zeruj(t, p)
Główna funkcja, zeruj, modyfikuje listę p na podstawie wartości z listy t.


def zeruj(t, p):
    while len(t) >= 4:
        m = int(len(t)/4)
Pętla while działa tak długo, jak długo lista t ma co najmniej 4 elementy. Zmienna m to długość jednej czwartej listy t, zaokrąglona w dół.


        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
Wywołujemy funkcje znajdz_min i znajdz_max, aby znaleźć minimalną i maksymalną wartość w pierwszej i ostatniej jednej czwartej listy t.


        print("min - " + str(min_) + " max - " + str(max_))
Wyświetlamy wartości minimalne i maksymalne.


        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
Przechodzimy przez wszystkie elementy listy p i zerujemy te, które są mniejsze od min_ lub większe od max_.


        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
        t = x
Tworzymy nową listę x, zawierającą elementy t z pominięciem pierwszych i ostatnich m elementów, i przypisujemy ją z powrotem do t.


    print(zlicz(p))
Po zakończeniu pętli wywołujemy funkcję zlicz dla listy p i wyświetlamy jej wynik.

Funkcja zlicz(p)
Funkcja zlicz liczy, ile elementów w liście p jest równych 0.


def zlicz(p):
    count = 0
    i = 0
    while(i < len(p)):
        if p[i] == 0:
            count += 1
        i += 1
    return count
Pętla while przechodzi przez listę p i zwiększa zmienną count o 1 za każdym razem, gdy znajdzie element równy 0. Funkcja zwraca liczbę zerowych elementów w p.

Sekcja główna programu

t = []
p = []
for num in range(0,9):
    for push_element in range(0,200):
        t.append(num+1)
        p.append(num+1)
Tworzymy dwie listy t i p. Każda z nich ma 1800 elementów (9 grup po 200 elementów). W każdej grupie elementy mają wartość num + 1, czyli: 200 jedynek, 200 dwójek, itd., aż do 200 dziewiątek.

python
Skopiuj kod
zeruj(t,p)
Wywołujemy funkcję zeruj dla list t i p.

# Zadanie 1.2

import math

def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_
            
def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_
            

def zeruj(t, p):
    while len(t) >= 4:
        m = int(len(t)/4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
        t = x
    print(zlicz(p))

def zlicz(p):
    count = 0
    i = 0
    while(i < len(p)):
        if p[i] == 0:
            count += 1
        i += 1
    return count

t = []
p = []
for num in range(0,9):
    for push_element in range(0,200):
        t.append(num+1)
        p.append(num+1)
zeruj(t,p)

---------------------------------
3
Funkcja znajdz_min(t, count)

def znajdz_min(t, count):
Definiujemy funkcję znajdz_min, która przyjmuje dwa argumenty:

t: listę liczb,
count: liczbę elementów do przeanalizowania od początku listy t.
python
Skopiuj kod
    min_ = t[0]
Inicjalizujemy zmienną min_ jako pierwszy element listy t. Będzie ona przechowywała najmniejszą wartość w analizowanym zakresie.


    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
Pętla for przechodzi przez pierwsze count elementów listy t. Jeśli t[i] jest mniejsze od min_, przypisujemy min_ nową wartość t[i]. Dzięki temu na końcu min_ zawiera najmniejszy element w analizowanym zakresie.


    return min_
Funkcja zwraca znalezioną najmniejszą wartość.

Funkcja znajdz_max(t, count)

def znajdz_max(t, count):
Definiujemy funkcję znajdz_max, która przyjmuje dwa argumenty:

t: listę liczb,
count: liczbę elementów do przeanalizowania od końca listy t.

    max_ = 0
Inicjalizujemy max_ na 0. To będzie wartość początkowa dla maksymalnej wartości (warto zwrócić uwagę, że wartość 0 może być problematyczna, jeśli wszystkie liczby są ujemne).


    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
Pętla przechodzi przez ostatnie count elementów listy t. Jeśli element t[i] jest większy od max_, przypisujemy nową wartość t[i] do max_.


    return max_
Funkcja zwraca największy znaleziony element.

Funkcja zeruj(t, p)
Główna funkcja zeruj modyfikuje listę p na podstawie wartości z listy t.


def zeruj(t, p):
    while len(t) >= 4:
Pętla while działa, dopóki lista t ma co najmniej 4 elementy.


        m = int(len(t)/4)
Obliczamy jedną czwartą długości t (zaokrągloną w dół), zapisując wynik w m.


        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
Znajdujemy najmniejszy element w pierwszych m elementach listy t i największy element w ostatnich m elementach.


        print("min - " + str(min_) + " max - " + str(max_))
Wyświetlamy wartości minimalne i maksymalne dla tej iteracji.


        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
Przechodzimy przez wszystkie elementy listy p. Jeśli element jest mniejszy niż min_ lub większy niż max_, ustawiamy jego wartość na 0.


        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
Tworzymy nową listę x, zawierającą elementy t z pominięciem pierwszych i ostatnich m elementów.


        t = x
Przypisujemy nową wartość listy x do t, co skraca listę t o 2 * m elementów.

Funkcja zeruj powtarza te operacje, dopóki t ma co najmniej 4 elementy, stale aktualizując wartości w p.

def znajdz_min(t, count):
    min_ = t[0]
    for i in range(0, int(count)):
        if t[i] < min_:
            min_ = t[i]
    return min_
            
def znajdz_max(t, count):
    max_ = 0
    for i in range(len(t)-count, len(t)):
        if t[i] > max_:
            max_ = t[i]
    return max_
            

def zeruj(t, p):
    while len(t) >= 4:
        m = int(len(t)/4)
        min_ = znajdz_min(t, m)
        max_ = znajdz_max(t, m)
        print("min - " + str(min_) + " max - " + str(max_))
        for i in range(0, len(p)):
            if p[i] < min_:
                p[i] = 0
            if p[i] > max_:
                p[i] = 0
        x = []
        for i in range(m, len(t)-m):
            x.append(t[i])
        t = x




def pobierz(plik):
    t = []
    with open(plik, "r") as f:
        for line in f:
            t.append(line.split())
    return t

s1 = pobierz("dane_systemy1.txt")
s2 = pobierz("dane_systemy2.txt")
s3 = pobierz("dane_systemy3.txt")

def systodec(liczba, sys):
#    litery = ["A", "B", "C", "D", "E", "F"]
    if liczba[0] == "-":
        znak = -1
        liczba.replace("-", "")
    else:
        znak = 1
    wynik = 0
    for i in range(len(liczba)):
        if liczba[i].isnumeric():
            wynik = wynik + int(liczba[i]) * sys ** (len(liczba)-1-i)
        else:
            tmp = ord(liczba[i])-55
            wynik = wynik + tmp * sys ** (len(liczba)-1-i)
    return wynik * znak

print(systodec('1100', 2))

s=[]
for s in s1:
    minimum = 10000000000
    if minimum > systodec(s[1], 2):
        minimum = systodec(s[1], 2)
print(minimum)





def pobierz(plik):
    t = []  # Inicjalizacja pustej listy, w której będą przechowywane linie z pliku
    with open(plik, "r") as f:  # Otwieranie pliku w trybie do odczytu
        for line in f:  # Iterowanie po każdej linii w pliku
            t.append(line.split())  # Dodanie linii podzielonej na elementy do listy `t`
    return t  # Zwrócenie listy `t` jako wynik

# Wczytanie danych z trzech plików do list
s1 = pobierz("dane_systemy1.txt")
s2 = pobierz("dane_systemy2.txt")
s3 = pobierz("dane_systemy3.txt")

def systodec(liczba, sys):
    # Sprawdzenie, czy liczba jest ujemna
    if liczba[0] == "-":
        znak = -1  # Ustawienie znaku na -1
        liczba = liczba[1:]  # Usunięcie znaku minus z liczby
    else:
        znak = 1  # Liczba jest dodatnia, znak = 1

    wynik = 0  # Inicjalizacja wyniku na 0
    for i in range(len(liczba)):  # iteracja przez wszystkie znaki liczby
        if liczba[i].isnumeric():  # Sprawdzenie, czy znak jest cyfrą (0-9)
            wynik += int(liczba[i]) * sys ** (len(liczba) - 1 - i)  # Dodanie wartości cyfry w odpowiedniej potędze
        else:
            # Zamiana liter A-F na wartości od 10 do 15 (np. 'A' -> 10)
            tmp = ord(liczba[i].upper()) - 55
            wynik += tmp * sys ** (len(liczba) - 1 - i)  # Dodanie wartości litery
    return wynik * znak  # Zwrócenie wyniku z uwzględnieniem znaku liczby




# Test konwersji liczby 1100 z systemu binarnego na dziesiętny
print(systodec('1100', 2))

# Znalezienie najmniejszej liczby w systemie binarnym z pliku `s1`
minimum = float('inf')  # Inicjalizacja zmiennej `minimum` jako nieskończoność
for s in s1:
    liczba = systodec(s[1], 2)  # Konwersja drugiej kolumny na system dziesiętny
    if minimum > liczba:  # Sprawdzenie, czy obecna liczba jest mniejsza od minimum
        minimum = liczba  # Aktualizacja minimum
print(minimum)  # Wypisanie najmniejszej liczby

# Liczenie ile wierszy ma różne wartości w różnych systemach
ile = 0  # Licznik niezgodnych wartości
for i in range(len(s1)):
    s1dec = systodec(s1[i][0], 2)  # Konwersja liczby z systemu binarnego
    s2dec = systodec(s2[i][0], 4)  # Konwersja liczby z systemu czwórkowego
    s3dec = systodec(s3[i][0], 8)  # Konwersja liczby z systemu ósemkowego
    if s1dec != s2dec != s3dec:  # Sprawdzenie, czy wartości są różne w trzech systemach
        ile += 1  # Zwiększenie licznika
print(ile)  # Wypisanie liczby różnych wierszy

# Szukanie maksymalnego skoku różnicy
skokmax = 0  # Inicjalizacja maksymalnego skoku jako 0
for i in range(len(s1)):
    for j in range(i + 1, len(s1)):
        liczba_i = systodec(s1[i][0], 2)  # Konwersja liczby z systemu binarnego
        liczba_j = systodec(s1[j][0], 2)  # Konwersja liczby z systemu binarnego
        rij = abs(liczba_i - liczba_j ** 2)  # Obliczenie różnicy wartości podniesionej do kwadratu
        ij = abs(liczba_i - liczba_j)  # Obliczenie różnicy wartości liczbowych
        if ij != 0:  # Sprawdzenie, czy różnica jest różna od zera
            skok = round(rij / ij)  # Obliczenie wartości skoku
            if skokmax < skok:  # Sprawdzenie, czy obecny skok jest większy od maksymalnego
                skokmax = skok  # Aktualizacja maksymalnego skoku
print(skokmax)  # Wypisanie maksymalnego skoku




liczby = []
fp = open('liczby.txt', 'r')
for i in fp:
    liczby.append(int(i))
lista1 = []
for j in liczby:
    if j <= 1000:
        lista1.append(j)

print(lista1[-1])
print(lista1[-2])

liczby2 = []
for x in liczby:
    dz = 1
    ileliczbdzielonych = 0
    for y in range(x):
        if x % dz == 0:
            ileliczbdzielonych = ileliczbdzielonych + 1
        dz += 1
    liczby2.append(ileliczbdzielonych)
print(liczby2)
print(liczby2.count(18))


with open(liczby.txt, r) as file:
    for liczba in file:
        liczby.append(int(liczba.strip()))
print(liczby)

liczby_pierwsze = []
with open('pierwsze_przyklad.txt', 'r') as file:
    for liczba in file:
        liczby_pierwsze.append(int(liczba.strip()))
print(liczby_pierwsze)

def pierwsza(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
        return True
    
#
#
# def zad1(tarcze, strzaly):
#     punkty = 0
#     for strzal in strzaly:
#         for i in range(len(tarcze)):
#             if strzal >= tarcze[i][0] and strzal <= (tarcze[i][0] + tarcze[i][1] - 1):
#                 punkty += 1
#                 tarcze[i][1] = 0
#         return punkty
# def zad2(tarcze):
#     maks = tarcze[0][1]
#     for i in range(len(tarcze)):
#         maks = max(maks, tarcze[i][1])
#
#
#     return maks
#
# def zad3(tarcze):
#     maks = 0
#     maks_s = 0
#     for i in range(1,5 * 60 + 1):
#         punkty = 0
#         for tarcza in tarcze:
#             if i >= tarcza[0] and i <= (tarcza[0] + tarcza[1] - 1):
#                 punkty += 1
#
#         if punkty > maks:
#             maks = punkty
#             maks_s = i
#
#     return maks_s
#
# def zad4(tarcze, strzaly):
#     punkty = 0
#     for strzal in strzaly:
#         for i in range(len(tarcze)):
#             if strzal >= tarcze[i][0] and strzal <= (tarcze[i][0] + tarcze[i][1] - 1):
#                 punkty += 1
#     return punkty
#
# dane = open('festyn.txt')
# wynik = open('zadanie4.txt', 'w')
#
#
# for _ in range(3):
#     tarcze = []
#
#     n = int(dane.readline())
#     for i in range(n):
#         a, b = map(int, dane.readline().split(' '))
#         tarcze.append([a, b])
#     print(tarcze)
#     strzaly = []
#     m = int(dane.readline())
#     for i in range(m):
#         t = int(dane.readline())
#         strzaly.append(t)
#     print(strzaly)
#
# wynik.write(f'zadanie2: {zad2(tarcze)}\n')
# wynik.write(f'zadanie3: {zad3(tarcze)}\n')
# wynik.write(f'zadanie4: {zad4(tarcze, strzaly)}\n')
# wynik.write(f'zadanie1: {zad1(tarcze, strzaly)}\n')
# wynik.write('\n')
#
# dane.close()
# wynik.close()




def zad1(strzaly,tarcze):
    punkty = 0
    for i in strzaly:
        for j in range(len(tarcze)):
            if i >= tarcze[j][0] and i<= (tarcze[j][0]+tarcze[j][1] - 1):
                punkty += 1
                tarcze[j][1] = 0
    return punkty

def zad2(tarcza):
    maks = 0
    for i in range(len(tarcze)):
        maks = max(maks, tarcze[i][1])
    return maks

def zad3(tarcze):
    maks=0
    maks_s = 0
    for i in range(1,5 * 60 + 1):
        punkty = 0
        for tarcza in tarcze:
            if i >= tarcza[0] and i<= (tarcza[0]+tarcza[1]-1):
                punkty += 1

        if punkty > maks:
            maks = punkty
            maks_s = i
    return maks_s

def zad4(tarcze,strzaly):
    punkty = 0
    for strzal in strzaly:
        for i in range(len(tarcze)):
            if strzal >= tarcze[i][0] and strzal <= (tarcze[i][0]+tarcze[i][1] - 1):
                punkty += 1
    return punkty

# tarcze = []
# with open('festyn.txt', 'r') as file:
# for line in file:
# tarcze.append(line.strip().split())
# print(tarcze)
# print(len(tarcze))
dane = open("festyn.txt")
for _ in range(3):
    tarcze= []
    n= int(dane.readline())
    for i in range(n):
        a,b = map(int, dane.readline().split(' '))
        tarcze.append([a,b])
    print(tarcze)
    strzaly=[]
    m = int(dane.readline())
    for i in range(m):
        t = int(dane.readline())
        strzaly.append(t)
    #print(strzaly)
    print(zad2(tarcze))
    print(zad3(tarcze))
    print(zad4(tarcze,strzaly))
    print(zad1(strzaly, tarcze))
#zad1 53 37 72
#zad2 247 182 247
#zad3 205 141 120
#zad 363 146 1098
